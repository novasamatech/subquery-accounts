type PureProxy @entity {
  id: ID!
  accountId: String! @index
  chainId: String! @index
}

type Proxied @entity {
  id: ID!
  chainId: String! @index
  type: String!
  proxyAccountId: String! @index
  accountId: String! @index
  delay: Int! @index
  blockNumber: Int!
  extrinsicIndex: Int!
  isPureProxy: Boolean!
}

# An account can be a multisig, or a normal account (like a signatory)
type Account @entity {
  id: ID!
  accountId: String!
  # if this account is the signatory on one or many multisigs, this will link to an array of multisigs
  multisigs: [AccountMultisig] @derivedFrom(field: "signatory")
  isMultisig: Boolean
  # if this account is a multisig, this will link to an array of signatories
  signatories: [AccountMultisig!] @derivedFrom(field: "multisig")
  # this is only needed in the case of a multisig
  threshold: Int
}

# entity for linking accounts and multisigs
type AccountMultisig @entity {
  id: ID!
  multisig: Account! @index
  signatory: Account! @index
}

enum EventStatus {
  approve
  reject
}

type MultisigEvent @entity {
  id: ID!
  accountId: String!
  status: EventStatus!
  blockCreated: Int!
  indexCreated: Int!
  multisig: MultisigOperation! @index
  timestamp: Int!
}

enum OperationStatus {
  pending
  cancelled
  executed
  error
}

type MultisigOperation @entity {
  id: ID!
  status: OperationStatus! @index
  chainId: String!
  accountId: String! @index
  section: String
  method: String
  callHash: String! @index
  callData: String
  depositor: String!
  blockCreated: Int! @index
  indexCreated: Int! @index
  timestamp: Int!
  events: [MultisigEvent!]! @derivedFrom(field: "multisig")
}
